<?xml version="1.0" standalone="yes"?>
<!-- build configuration -->
<project name="thane" default="dist" basedir=".">

  <!-- configuration parameters -->
  <property name="lib.name"     value="thane"/>
  <property name="deploy.dir"   value="dist"/>
  <property name="bin.dir"      value="bin"/>
  <import file="etc/libs-incl.xml"/>

  <property name="tamarin.dir"  value="${basedir}/tamarin-central"/>
  <property name="tamdist.dir"  value="${tamarin.dir}/dist"/>
  <property name="thane.dir"    value="${tamarin.dir}/thane"/>
  <property name="thanedist.dir" value="${tamdist.dir}/${lib.name}"/>
  <property name="builtin.name" value="builtin"/>

  <!-- declare our classpath business -->
  <path id="classpath">
    <fileset dir="${deploy.dir}/lib" includes="**/*.jar"/>
  </path>

  <!-- prepares the application directories -->
  <target name="prepare">
    <mkdir dir="${deploy.dir}"/>
    <mkdir dir="${deploy.dir}/lib"/>
    <mkdir dir="${tamdist.dir}"/>
    <copy todir="${deploy.dir}/lib" flatten="true">
      <fileset refid="${lib.name}.libs"/>
    </copy>
    <copy file="etc/thane-config.xml.in" tofile="${deploy.dir}/thane-config.xml">
      <filterset>
        <filter token="flex_sdk_dir" value="${flexsdk.dir}"/>
      </filterset>
    </copy>
  </target>

  <!-- checks whether the Thane library needs building -->
  <target name="checkthanelib">
    <condition property="no_build_thanelib"><and>
      <uptodate targetfile="${thane.dir}/${lib.name}.abc">
        <srcfiles dir="${thane.dir}" includes="**/*.as"/>
        <srcfiles dir="${tamarin.dir}/core" includes="*.abc"/>
      </uptodate>
      <uptodate targetfile="${thanedist.dir}/${lib.name}.swc">
        <srcfiles dir="${thane.dir}" includes="**/*.as"/>
        <srcfiles dir="${tamarin.dir}/core" includes="*.as"/>
      </uptodate>
    </and></condition>
  </target>

  <!-- builds the Thane library -->
  <target name="thanelib" unless="no_build_thanelib" depends="prepare,checkthanelib">
    <taskdef name="asclib" classname="flex.ant.AscLibTask" classpathref="classpath"/>
    <dirname property="abs.thane.out.dir" file="${tamarin.dir}/thane/somefile.txt"/>
    <asclib as3="true" strict="true" classpathref="classpath"
            outdir="${abs.thane.out.dir}" out="thane">
      <import dir="${tamarin.dir}">
        <include name="core/builtin.abc"/>
      </import>
      <filespec dir="${tamarin.dir}/thane/as3src">
        <include name="**/*.as"/>
      </filespec>
    </asclib>

    <java jar="${flexsdk.dir}/lib/compc.jar" fork="true" failonerror="true">
      <arg value="-load-config"/>
      <arg value="dist/thane-config.xml"/>
      <arg value="-compiler.strict=false"/>
      <arg value="-compiler.show-actionscript-warnings=false"/>
      <arg value="-compiler.optimize=true"/>
      <arg value="-include-sources"/>
      <arg value="${tamarin.dir}/core/builtin.as"/>
      <arg value="${tamarin.dir}/core/Error.as"/>
      <arg value="${tamarin.dir}/core/Math.as"/>
      <arg value="${tamarin.dir}/core/XML.as"/>
      <arg value="${tamarin.dir}/core/Date.as"/>
      <arg value="${tamarin.dir}/core/RegExp.as"/>
      <arg value="${thane.dir}/as3src"/>
      <arg value="-output"/>
      <arg value="${thanedist.dir}/${lib.name}.swc"/>
    </java>
  </target>

  <!-- detect make command -->
  <condition property="isunix"><os family="unix"/></condition>
  <if><os name="FreeBSD"/><then>
    <property name="make" value="gmake"/>
  </then><else>
    <property name="make" value="make"/>
  </else></if>

  <!-- enable debugging -->
  <!-- TODO: are 2 individual targets needed and what do we do with them? -->
  <property name="tamarin-debugger" value="--enable-debugger"/>

  <!-- build tamarin -->
  <target name="tamarin" depends="prepare,thanelib" if="isunix">
    <echo level="info" message="Doing native compilation on ${os.name}..."/>
    <exec dir="${tamdist.dir}" executable="python" failonerror="true">
       <arg line="${tamarin.dir}/configure.py --enable-thane ${tamarin-debugger}"/>
    </exec>
    <exec dir="${tamdist.dir}" executable="${make}" failonerror="true">
       <arg line="-j4"/>
    </exec>
  </target>

  <!-- copy pre-built binary files to dist -->
  <target name="distbinaries" depends="prepare,detect-arch">
    <copy file="${bin.dir}/${lib.name}.swc" todir="${deploy.dir}"/>
    <copy todir="${deploy.dir}">
      <fileset dir="${bin.dir}/${arch.id}" includes="avm${lib.name}*"/>
    </copy>
  </target>

  <!-- cleans up our build artifacts -->
  <target name="clean">
    <delete dir="${deploy.dir}"/>
    <delete dir="${tamarin.dir}/${deploy.dir}"/>
    <delete><fileset dir="${tamarin.dir}/build" includes="*.pyc"/></delete>
    <!-- temporary hack to soothe upset build machine -->
    <delete>
      <fileset dir="${bin.dir}">
        <include name="thane.swc.r*"/>
        <include name="lin32"/>
      </fileset>
    </delete>
  </target>

  <!-- distclean = same as clean -->
  <!-- TODO: what should be the difference? -->
  <target name="distclean" depends="clean"/>

  <!-- copies to the dist directory -->
  <target name="dist" depends="prepare,distbinaries"/>

  <!-- deploys our built libraries to maven -->
  <target name="deploy" depends="dist">
    <antcall target="maven-deploy"/>
  </target>

  <!-- Detects the architecture id of this computer -->
  <target name="detect-arch">
    <!-- apparently Java uses both amd64 and x86_64 -->
    <condition property="arch" value="64" else="32">
      <and>
        <!-- Mac binaries all get called '32-bit' -->
        <not><os name="Mac OS X"/></not>
        <or><os arch="amd64"/><os arch="x86_64"/></or>
      </and>
    </condition>
    <property name="arch.id" value="${os.name}-${arch}"/>
    <echo>Architecture is ${arch.id}</echo>
  </target>

  <!-- Deploys our built executables to the bin directory. Normally a developer will -->
  <!-- run this then do an svn commit on each target architecture, completing the new -->
  <!-- thane release. The thane.swc file is included, but should not change from arch -->
  <!-- to arch since the set of native methods doesn't change. -->
  <target name="genbinaries" depends="detect-arch,tamarin">
    <mkdir dir="${bin.dir}"/>
    <mkdir dir="${bin.dir}/${arch.id}"/>
    <copy file="${thanedist.dir}/avm${lib.name}" todir="${bin.dir}/${arch.id}"/>
    <copy file="${thanedist.dir}/${lib.name}.swc" todir="${bin.dir}"/>
  </target>

</project>
