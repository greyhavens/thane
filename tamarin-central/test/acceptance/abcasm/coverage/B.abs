/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is [Open Source Virtual Machine.].
 *
 * The Initial Developer of the Original Code is
 * Adobe System Incorporated.
 * Portions created by the Initial Developer are Copyright (C) 2009
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Adobe AS3 Team
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

function main() {
	getlocal0
	pushscope
	findproperty START 
	pushstring "Instructions that start with the letter b" 
	callpropvoid START 1
	newfunction .function_id(runTest)
	getlocal0
	call 0
	findproperty END
	callpropvoid END 0
	returnvoid
}

function runTest()
{
	getlocal0
	pushscope

	findproperty START 
	pushstring "bitand" 
	callpropvoid START 1

	findproperty COMPARE_STRICTEQ
	pushstring "int and int"
	pushint 0x00001000 // expected
	pushint 0x00101010
	pushint 0x0000F000
	bitand
	callpropvoid COMPARE_STRICTEQ 3

	findproperty COMPARE_STRICTEQ
	pushstring "int and uint"
	pushint 0x00101010 // expected
	pushint 0x00101010
	pushuint 0xFFFFFFFF
	bitand
	callpropvoid COMPARE_STRICTEQ 3

	findproperty COMPARE_STRICTEQ
	pushstring "int and double"
	pushint 1 // expected
	pushint 7
	pushdouble 1.2
	bitand
	callpropvoid COMPARE_STRICTEQ 3

	findproperty END
	callpropvoid END 0

	findproperty START 
	pushstring "bitnot" 
	callpropvoid START 1
	findproperty COMPARE_STRICTEQ
	pushstring "not int"
	pushint -8 // expected
	pushint 7
	bitnot
	callpropvoid COMPARE_STRICTEQ 3

	//  Somewhat odd...
	findproperty COMPARE_STRICTEQ
	pushstring "not uint"
	pushint 0x7FFFFFFF // expected
	pushuint 0x80000000
	bitnot
	callpropvoid COMPARE_STRICTEQ 3

	findproperty COMPARE_STRICTEQ
	pushstring "not string"
	pushint -1 // expected
	pushstring "there is no Dana only Zuul"
	bitnot
	callpropvoid COMPARE_STRICTEQ 3

	findproperty COMPARE_STRICTEQ
	pushstring "not string -- convertible"
	pushint -256 // expected
	pushstring "0xff"
	bitnot
	callpropvoid COMPARE_STRICTEQ 3

	findproperty END
	callpropvoid END 0

	findproperty START 
	pushstring "bitor" 
	callpropvoid START 1

	findproperty COMPARE_STRICTEQ
	pushstring "int or int"
	pushint 0x0010F010 // expected
	pushint 0x00101010
	pushint 0x0000F000
	bitor
	callpropvoid COMPARE_STRICTEQ 3

	findproperty COMPARE_STRICTEQ
	pushstring "int or uint"
	pushint -1 // expected
	pushint 0x00101010
	pushuint 0xFFFFFFFF
	bitor
	callpropvoid COMPARE_STRICTEQ 3

	findproperty COMPARE_STRICTEQ
	pushstring "int or double"
	pushint 7 // expected
	pushint 7
	pushdouble 1.2
	bitor
	callpropvoid COMPARE_STRICTEQ 3
	
	findproperty END
	callpropvoid END 0

	findproperty START 
	pushstring "bitor" 
	callpropvoid START 1

	findproperty COMPARE_STRICTEQ
	pushstring "int xor int"
	pushint 0x0010E010 // expected
	pushint 0x00101010
	pushint 0x0000F000
	bitxor
	callpropvoid COMPARE_STRICTEQ 3

	findproperty COMPARE_STRICTEQ
	pushstring "int xor uint"
	pushint -1052689 /* FFEFEFEF */ // expected
	pushint 0x00101010
	pushuint 0xFFFFFFFF
	bitxor
	callpropvoid COMPARE_STRICTEQ 3

	findproperty COMPARE_STRICTEQ
	pushstring "int xor double"
	pushint 6 // expected
	pushint 7
	pushdouble 1.2
	bitxor
	callpropvoid COMPARE_STRICTEQ 3
	
	findproperty END
	callpropvoid END 0

	returnvoid
}
