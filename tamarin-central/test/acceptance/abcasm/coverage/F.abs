/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is [Open Source Virtual Machine.].
 *
 * The Initial Developer of the Original Code is
 * Adobe System Incorporated.
 * Portions created by the Initial Developer are Copyright (C) 2009
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Adobe AS3 Team
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

function main() {
	getlocal0
	pushscope
	findproperty START 
	pushstring "Instructions that start with the letter F" 
	callpropvoid START 1
	newfunction .function_id(runTest)
	getlocal0
	call 0
	findproperty END
	callpropvoid END 0
	returnvoid
}

.method_info { 
	name: runTest 
}
.method_body_info {

	method: .function_id(runTest)

	traits: {
		.trait { kind: Trait_Slot name: var1 }
	}
	code:
	{
		getlocal0
		pushscope

		findproperty COMPARE_STRICTEQ
	pushstring "findproperty"
		getglobalscope // expected
		findproperty Number

		findproperty COMPARE_STRICTEQ
	pushstring "findproperty zuul"
		getscopeobject 0 // expected
		findproperty zuul

		pushint 7
		pushscope

		findproperty COMPARE_STRICTEQ
	pushstring "findproperty _toString"
		getscopeobject 0 // expected
		findproperty _toString

		popscope

		findproperty Object
		constructprop Object 0
		pushwith

		findproperty COMPARE_STRICTEQ
	pushstring "findproperty toLocaleString"
		getscopeobject 1 // expected
		findproperty toLocaleString
		callpropvoid COMPARE_STRICTEQ 3

		findproperty COMPARE_STRICTEQ
	pushstring "findpropstrict toLocaleString"
		getscopeobject 1 // expected
		findpropstrict toLocaleString
		callpropvoid COMPARE_STRICTEQ 3

		newfunction .function_id(findpropstrictErrorCase1)
		getlocal0
		call 0

		returnvoid
	}
}

.method_info { name:findpropstrictErrorCase1 }
.method_body_info {
	method: .function_id(findpropstrictErrorCase1)
	exception: {
			.exception {
			from: beginTry 
			to:endTry 
			target:catchRefError 
			type:ReferenceError 
		}
	}
	code:
	{
		getlocal0
		pushscope
	beginTry:
		findproperty COMPARE_STRICTEQ
	pushstring "findpropstrict zuul"
		getscopeobject 0 // expected
		findpropstrict zuul
		findproperty FAIL
	swap
	callpropvoid FAIL 1
	endTry:
		returnvoid

	catchRefError:
		getlocal0
		pushscope
		findproperty PASS
	swap
	callpropvoid PASS 1
		returnvoid
	}
}
