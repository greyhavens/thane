/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is [Open Source Virtual Machine.].
 *
 * The Initial Developer of the Original Code is
 * Adobe System Incorporated.
 * Portions created by the Initial Developer are Copyright (C) 2009
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Adobe AS3 Team
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

function main() {
	getlocal0
	pushscope
	findproperty START 
	pushstring "Instructions that start with the letter G" 
	callpropvoid START 1
	newfunction .function_id(runTest)
	getlocal0
	call 0
	findproperty END
	callpropvoid END 0
	returnvoid
}

.script_info {
	traits: {
		.trait { kind: Trait_Slot  name: globalSlot1 }
	}
}

function runTest()
{
	getlocal0
	pushscope 

	getglobalscope
	pushint 77
	setproperty globalSlot1

	findproperty COMPARE_STRICTEQ
	pushstring "getproperty Array[] length"
	pushint 0 // expected
	findpropstrict Array
	constructprop Array 0
	getproperty length
	callpropvoid COMPARE_STRICTEQ 3

	findproperty COMPARE_STRICTEQ
	pushstring "getproperty Array(77) length"
	pushint 77 // expected
	findpropstrict Array
	pushint 77
	constructprop Array 1
	getproperty length
	callpropvoid COMPARE_STRICTEQ 3

	/*  TODO: assembler limitations? 
	 *  getdescendents doesn't find what's expected.
	 */
	findproperty XML
	constructprop XML 0
	setlocal1

	findproperty COMPARE_STRICTEQ
	pushstring "getdescendents"
	//getlocal0 // expected
	findproperty XML
	pushstring "<foo><bar/><baz/></foo>"
	constructprop XML 1
	getdescendants bar
	getlocal1
	ifne failgetdesc
	pushstring "getdescendents"
	findproperty PASS
	swap
	callpropvoid PASS 1
	jump endgetdesc
	failgetdesc:
	pushstring "getdescendents"
	findproperty FAIL
	swap
	callpropvoid FAIL 1
	endgetdesc:


	newfunction .function_id(getglobalslot_test)
	getlocal0
	call 0

	newfunction .function_id(getlex_test)
	getlocal0
	call 0


	pushint 392
	setlocal 3
	pushdouble 2.
	setlocal 20

	findproperty COMPARE_STRICTEQ
	pushstring "getlocal3"
	pushint 392 // expected
	getlocal3
	callpropvoid COMPARE_STRICTEQ 3

	findproperty COMPARE_STRICTEQ
	pushstring "getlocal 20"
	pushdouble 2. // expected
	getlocal 20
	callpropvoid COMPARE_STRICTEQ 3

	findproperty COMPARE_STRICTEQ
	pushstring "getproperty"
	pushint 0 // expected
	findproperty Array
	constructprop Array 0
	dup
	setlocal 4
	getproperty length
	callpropvoid COMPARE_STRICTEQ 3

	findproperty COMPARE_STRICTEQ
	pushstring "getproperty - NoSuchProperty"
	pushundefined // expected
	getglobalscope
	getproperty NoSuchProperty
	callpropvoid COMPARE_STRICTEQ 3

	findproperty COMPARE_STRICTEQ
	pushstring "getscopeobject 1"
	pushint 0 // expected
	getlocal 4
	pushscope
	getscopeobject 1
	getproperty length 
	callpropvoid COMPARE_STRICTEQ 3

	findproperty COMPARE_STRICTEQ
	pushstring "getscopeobject 0"
	pushint 77 // expected
	getscopeobject 0
	getproperty globalSlot1
	callpropvoid COMPARE_STRICTEQ 3

	findproperty COMPARE_STRICTEQ
	pushstring "getslot"
	pushint 77 // expected
	getglobalscope
	getslot 1
	callpropvoid COMPARE_STRICTEQ 3

	newfunction .function_id(getsuper_test)
	getlocal 0
	call 0

	findproperty COMPARE_STRICTEQ
	pushstring "greaterequals"
	pushtrue // expected
	pushint 7
	pushint 7
	greaterequals
	callpropvoid COMPARE_STRICTEQ 3


	findproperty COMPARE_STRICTEQ
	pushstring "greaterequals"
	pushtrue // expected
	pushint 77
	pushint 7
	greaterequals
	callpropvoid COMPARE_STRICTEQ 3

	findproperty COMPARE_STRICTEQ
	pushstring "greaterequals"
	pushfalse // expected
	pushint 7
	pushint 77
	greaterequals
	callpropvoid COMPARE_STRICTEQ 3

	findproperty COMPARE_STRICTEQ
	pushstring "greaterthan"
	pushfalse // expected
	pushint 7
	pushint 7
	greaterthan
	callpropvoid COMPARE_STRICTEQ 3


	findproperty COMPARE_STRICTEQ
	pushstring "greaterthan"
	pushtrue // expected
	pushint 77
	pushint 7
	greaterthan
	callpropvoid COMPARE_STRICTEQ 3

	findproperty COMPARE_STRICTEQ
	pushstring "greaterthan"
	pushfalse // expected
	pushint 7
	pushint 77
	greaterthan
	callpropvoid COMPARE_STRICTEQ 3


	returnvoid
}

.method_info { name: getglobalslot_test }
.method_body_info {
	method: .function_id(getglobalslot_test)
	exception: {
		.exception { from: beginTry to: endTry target:catchNoSlot }
	}
	code:
	{
		getlocal0
		pushscope

	beginTry:
		findproperty COMPARE_STRICTEQ
	pushstring "getglobalslot"
		pushint 77 // expected
		getglobalscope
		getslot 1
		callpropvoid COMPARE_STRICTEQ 3
	endTry:
		returnvoid

	catchNoSlot:
		findproperty PASS
	swap
	callpropvoid PASS 1
		returnvoid
	}
}

.method_info { name: getlex_test }
.method_body_info {
	method: .function_id(getlex_test)
	exception: {
		.exception { from: beginTry to: endTry target:catchNoProp }
	}
	code:
	{
		getlocal0
		pushscope

		findproperty COMPARE_STRICTEQ
	pushstring "getlex"
		pushint 77 // expected
		getlex globalSlot1
		callpropvoid COMPARE_STRICTEQ 3

	beginTry:
		getlex noSuchProperty
	endTry:
		pushstring "getlex noSuchProperty: succeeded?"
		findproperty FAIL
	swap
	callpropvoid FAIL 1
		returnvoid
	catchNoProp:
		getlocal0
		pushscope
		pushstring "getlex negative case:"
		swap
		add
		findproperty PASS
	swap
	callpropvoid PASS 1
		returnvoid
	}
}
	


.method_info { name: getsuper_test }
.method_body_info {
	method: .function_id(getsuper_test)
	exception: {
		.exception { from: beginTry to: endTry target:catchNoProp }
	}
	code:
	{
		getlocal0
		pushscope

		findproperty COMPARE_STRICTEQ
	pushstring "getsuper"
		pushundefined // expected

		findproperty Array
		constructprop Array 0

	beginTry:
		getsuper length
		pop
	endTry:
		pushstring "getsuper length"
		findproperty PASS
	swap
	callpropvoid PASS 1
		returnvoid
	//  TODO: bad testcase?
	catchNoProp:
		getlocal0
		pushscope
		pushstring "getsuper FIXME FAIL "
		swap
		add
		findproperty PASS
	swap
	callpropvoid PASS 1
		returnvoid
	}
}
	

