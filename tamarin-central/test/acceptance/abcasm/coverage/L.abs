/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is [Open Source Virtual Machine.].
 *
 * The Initial Developer of the Original Code is
 * Adobe System Incorporated.
 * Portions created by the Initial Developer are Copyright (C) 2009
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Adobe AS3 Team
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

function main() {
	getlocal0
	pushscope
	findproperty START 
	pushstring "instructions that start with the letter L" 
	callpropvoid START 1
	newfunction .function_id(runTest)
	getlocal0
	call 0
	findproperty END
	callpropvoid END 0
	returnvoid
}

function runTest()
{
		findproperty COMPARE_STRICTEQ
	pushstring "label and lessequals"
		pushint 2 // expected
		pushint 0
	backEdgeNeedsLabel:
		label
		increment_i
		dup
		pushint 1
		lessequals
		iftrue backEdgeNeedsLabel
		callpropvoid COMPARE_STRICTEQ 3

		findproperty COMPARE_STRICTEQ
	pushstring "label and lessthan"
		pushint 7 // expected
		pushint 0
	lessthanBackEdge:
		label
		increment_i
		dup
		pushint 7
		lessthan
		iftrue lessthanBackEdge
		callpropvoid COMPARE_STRICTEQ 3

		/*
		 *  TODO: assembler support for lookupswitch
		 */

		findproperty COMPARE_STRICTEQ
	pushstring "lshift"
		pushint 16 // expected
		pushint 8
		pushuint 0x00123401
		lshift
		callpropvoid COMPARE_STRICTEQ 3

		findproperty COMPARE_STRICTEQ
	pushstring "lshift 1 << 0x1f"
		pushint -2147483647 // expected
		pushint 1
		pushuint 0x1f
		lshift
		//  Working around cheesy assembler limitation
		swap
		decrement_i
		swap
		callpropvoid COMPARE_STRICTEQ 3

		findproperty COMPARE_STRICTEQ
	pushstring "lshift 0x010101 << 0x1f"
		pushint -2147483647 // expected
		pushint 0x010101
		pushuint 0x1f
		lshift
		//  Working around cheesy assembler limitation
		swap
		decrement_i
		swap
		callpropvoid COMPARE_STRICTEQ 3




		returnvoid
}
