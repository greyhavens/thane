/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is [Open Source Virtual Machine.].
 *
 * The Initial Developer of the Original Code is
 * Adobe System Incorporated.
 * Portions created by the Initial Developer are Copyright (C) 2009
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Adobe AS3 Team
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

function main() {
	getlocal0
	pushscope
	findproperty START 
	pushstring "instructions that start with the letter M" 
	callpropvoid START 1
	newfunction .function_id(runTest)
	getlocal0
	call 0
	findproperty END
	callpropvoid END 0
	returnvoid
}

function runTest()
{
	findproperty COMPARE_STRICTEQ
	pushstring "modulo"
	pushint 1 // expected
	pushint 5
	pushint 4
	modulo
	callpropvoid COMPARE_STRICTEQ 3

	findproperty COMPARE_STRICTEQ
	pushstring "modulo double/int"
	pushdouble 1.25 // expected
	pushdouble 5.25
	pushint 4
	modulo
	callpropvoid COMPARE_STRICTEQ 3

	findproperty COMPARE_STRICTEQ
	pushstring "modulo double/double"
	pushdouble .0 // expected
	pushdouble 5.
	pushdouble 2.5
	modulo
	callpropvoid COMPARE_STRICTEQ 3

	findproperty COMPARE_STRICTEQ
	pushstring "multiply int*int"
	pushint 0x40 // expected
	pushint 0x20
	pushint 2
	multiply
	callpropvoid COMPARE_STRICTEQ 3

	findproperty COMPARE_STRICTEQ
	pushstring "multiply int*int past signed 32-bits"
	pushuint 4294967294 // expected
	pushint 0x7FFFFFFF
	pushint 2
	multiply
	callpropvoid COMPARE_STRICTEQ 3

	findproperty COMPARE_STRICTEQ
	pushstring "multiply double * double"
	pushdouble 21.78125 // expected
	pushdouble 5.125
	pushdouble 4.25
	multiply
	callpropvoid COMPARE_STRICTEQ 3

	findproperty COMPARE_STRICTEQ
	pushstring "multiply_i int*int"
	pushint 0x40 // expected
	pushint 0x20
	pushint 2
	multiply_i
	callpropvoid COMPARE_STRICTEQ 3

	findproperty COMPARE_STRICTEQ
	pushstring "multiply_i int*int past signed 32-bits"
	pushint -2 // expected
	pushint 0x7FFFFFFF
	pushint 2
	multiply_i
	callpropvoid COMPARE_STRICTEQ 3

	findproperty COMPARE_STRICTEQ
	pushstring "multiply_i double * double"
	pushint 20 // expected
	pushdouble 5.125
	pushdouble 4.25
	multiply_i
	callpropvoid COMPARE_STRICTEQ 3


	returnvoid
}
